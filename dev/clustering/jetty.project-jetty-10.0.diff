diff -aurN '--exclude=.git' '--exclude=guava-*jre.jar' "jetty.project-jetty-10.0.15\\jetty-server.orig/src/main/java/org/eclipse/jetty/server/session/GluuObjectOutputStream.java" "jetty.project-jetty-10.0.15\\jetty-server/src/main/java/org/eclipse/jetty/server/session/GluuObjectOutputStream.java"
--- "jetty.project-jetty-10.0.15\\jetty-server.orig/src/main/java/org/eclipse/jetty/server/session/GluuObjectOutputStream.java"	1970-01-01 03:00:00.000000000 +0300
+++ "jetty.project-jetty-10.0.15\\jetty-server/src/main/java/org/eclipse/jetty/server/session/GluuObjectOutputStream.java"	2023-08-18 19:59:20.000000000 +0300
@@ -0,0 +1,36 @@
+package org.eclipse.jetty.server.session;
+
+import java.io.IOException;
+import java.io.ObjectOutputStream;
+import java.io.OutputStream;
+import java.io.Serializable;
+
+public class GluuObjectOutputStream extends java.io.ObjectOutputStream {
+	private ObjectOutputStream oos = new ObjectOutputStream(new NullOutputStream());
+
+	public GluuObjectOutputStream(OutputStream out) throws IOException {
+    	super(out);
+    	enableReplaceObject(true);
+    }
+
+    @Override
+    protected Object replaceObject(Object obj) throws IOException {
+    	try {
+    		oos.writeObject(obj);
+    		return obj;
+    	} catch (Throwable ex) {
+    		if (obj instanceof Serializable) {
+    			return obj;
+    		}
+
+    		System.err.println("Skipping serialization of CLASS <<<" + obj.getClass() + ">>> object " + obj);
+    	}
+
+    	return null;
+    }
+
+    public class NullOutputStream extends OutputStream {
+    	  @Override
+    	  public void write(int b) throws IOException {}
+    }
+}
diff -aurN '--exclude=.git' '--exclude=guava-*jre.jar' "jetty.project-jetty-10.0.15\\jetty-server.orig/src/main/java/org/eclipse/jetty/server/session/SessionData.java" "jetty.project-jetty-10.0.15\\jetty-server/src/main/java/org/eclipse/jetty/server/session/SessionData.java"
--- "jetty.project-jetty-10.0.15\\jetty-server.orig/src/main/java/org/eclipse/jetty/server/session/SessionData.java"	2023-04-11 20:24:32.000000000 +0300
+++ "jetty.project-jetty-10.0.15\\jetty-server/src/main/java/org/eclipse/jetty/server/session/SessionData.java"	2023-08-18 20:21:10.000000000 +0300
@@ -13,8 +13,10 @@
 
 package org.eclipse.jetty.server.session;
 
+import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.Serializable;
+import java.util.Base64;
 import java.util.Collections;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -68,8 +70,12 @@
     public static void serializeAttributes(SessionData data, java.io.ObjectOutputStream out)
         throws IOException
     {
+		LOG.info("---------------------->>> SERIALIZE START");
         int entries = data._attributes.size();
         out.writeObject(entries);
+
+        //dumpAtributes(data, out);
+
         for (Entry<String, Object> entry : data._attributes.entrySet())
         {
             out.writeUTF(entry.getKey());
@@ -109,10 +115,31 @@
             if (LOG.isDebugEnabled())
                 LOG.debug("Attribute {} class={} isServerLoader={}", entry.getKey(), clazz.getName(), (!isContextLoader));
             out.writeBoolean(!isContextLoader);
-            out.writeObject(entry.getValue());
+
+            // Temporary code for trace
+            byte[] serializedDump = dumpObject(entry.getValue());
+			LOG.info("Attribute {} with class name {}. Serialized value size is: {}, dump in base64: {}", entry.getKey(), clazz.getName(), serializedDump.length, Base64.getEncoder().encodeToString(serializedDump));
+
+			out.write(serializedDump);
         }
+		LOG.info("----------------------<<< SERIALIZE END");
     }
 
+    private static byte[] dumpObject(Object value) throws IOException {
+    	byte[] result = null;
+    	ByteArrayOutputStream bos = new ByteArrayOutputStream();
+    	try (java.io.ObjectOutputStream out = new GluuObjectOutputStream(bos)) {
+    		// Skip header
+			out.flush();
+    		bos.reset();
+    		
+    		out.writeObject(value);
+			out.flush();
+			result = bos.toByteArray();
+		}
+		return result;
+	}
+
     /**
      * De-serialize the attribute map of a session.
      *
@@ -126,6 +153,7 @@
     public static void deserializeAttributes(SessionData data, java.io.ObjectInputStream in)
         throws IOException, ClassNotFoundException
     {
+		LOG.info("---------------------->>> DESERIALIZE START");
         Object o = in.readObject();
         if (o instanceof Integer)
         {
@@ -143,8 +171,13 @@
                 boolean isServerClassLoader = in.readBoolean(); //use server or webapp classloader to load
                 if (LOG.isDebugEnabled())
                     LOG.debug("Deserialize {} isServerLoader={} serverLoader={} tccl={}", name, isServerClassLoader, serverLoader, contextLoader);
-                Object value = ((ClassLoadingObjectInputStream)in).readObject(isServerClassLoader ? serverLoader : contextLoader);
-                data._attributes.put(name, value);
+                try {
+	                Object value = ((ClassLoadingObjectInputStream)in).readObject(isServerClassLoader ? serverLoader : contextLoader);
+	                data._attributes.put(name, value);
+	                LOG.info("Deserialize {} isServerLoader={} serverLoader={} tccl={}", name, isServerClassLoader, serverLoader, contextLoader);
+                } catch (java.io.OptionalDataException ex) {
+	                LOG.info("Faield to deserialize {}", name);
+				}
             }
         }
         else
@@ -155,6 +188,7 @@
             data._attributes = new ConcurrentHashMap<>();
             data.putAllAttributes((Map<String, Object>)o);
         }
+		LOG.info("----------------------<<< DESERIALIZE END");
     }
 
     public SessionData(String id, String cpath, String vhost, long created, long accessed, long lastAccessed, long maxInactiveMs)
