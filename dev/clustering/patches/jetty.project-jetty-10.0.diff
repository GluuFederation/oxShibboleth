diff --git a/pom.xml b/pom.xml
index df2e211adb..484b716387 100644
--- a/pom.xml
+++ b/pom.xml
@@ -508,43 +508,6 @@
           </execution>
         </executions>
       </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-checkstyle-plugin</artifactId>
-        <version>${maven.checkstyle.plugin.version}</version>
-        <configuration>
-          <configLocation>jetty-checkstyle.xml</configLocation>
-          <includeTestSourceDirectory>true</includeTestSourceDirectory>
-          <violationSeverity>warning</violationSeverity>
-          <consoleOutput>true</consoleOutput>
-          <sourceDirectories>
-            <!-- only scan source directory (not generated, filtered, or copied source) -->
-            <sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>
-            <sourceDirectory>${project.build.testSourceDirectory}</sourceDirectory>
-          </sourceDirectories>
-        </configuration>
-        <dependencies>
-          <dependency>
-            <groupId>org.eclipse.jetty</groupId>
-            <artifactId>build-resources</artifactId>
-            <version>${project.version}</version>
-          </dependency>
-          <dependency>
-            <groupId>com.puppycrawl.tools</groupId>
-            <artifactId>checkstyle</artifactId>
-            <version>${checkstyle.version}</version>
-          </dependency>
-        </dependencies>
-        <executions>
-          <execution>
-            <id>checkstyle-check</id>
-            <phase>validate</phase>
-            <goals>
-              <goal>check</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
     </plugins>
 
     <pluginManagement>
diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/session/JDBCSessionDataStore.java b/jetty-server/src/main/java/org/eclipse/jetty/server/session/JDBCSessionDataStore.java
index 9e06ef130a..eab76e6b9b 100644
--- a/jetty-server/src/main/java/org/eclipse/jetty/server/session/JDBCSessionDataStore.java
+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/session/JDBCSessionDataStore.java
@@ -23,6 +23,7 @@ import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
+import java.util.Base64;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -742,10 +743,11 @@ public class JDBCSessionDataStore extends AbstractSessionDataStore
                 statement.setLong(11, data.getMaxInactiveMs());
 
                 try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
-                     ObjectOutputStream oos = new ObjectOutputStream(baos))
+                     ObjectOutputStream oos = new GluuObjectOutputStream(baos))
                 {
                     SessionData.serializeAttributes(data, oos);
                     byte[] bytes = baos.toByteArray();
+        			LOG.info("SessionData dump for Vhost {} in base64: {}", _context.getVhost(), Base64.getEncoder().encodeToString(bytes));
                     ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
                     statement.setBinaryStream(12, bais, bytes.length); //attribute map as blob
                 }
@@ -773,7 +775,7 @@ public class JDBCSessionDataStore extends AbstractSessionDataStore
                 statement.setLong(6, data.getMaxInactiveMs());
 
                 try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
-                     ObjectOutputStream oos = new ObjectOutputStream(baos))
+                     ObjectOutputStream oos = new GluuObjectOutputStream(baos))
                 {
                     SessionData.serializeAttributes(data, oos);
                     byte[] bytes = baos.toByteArray();
diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/session/SessionData.java b/jetty-server/src/main/java/org/eclipse/jetty/server/session/SessionData.java
index ef6e953ec7..72981ecf76 100644
--- a/jetty-server/src/main/java/org/eclipse/jetty/server/session/SessionData.java
+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/session/SessionData.java
@@ -13,8 +13,10 @@
 
 package org.eclipse.jetty.server.session;
 
+import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.Serializable;
+import java.util.Base64;
 import java.util.Collections;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -68,8 +70,12 @@ public class SessionData implements Serializable
     public static void serializeAttributes(SessionData data, java.io.ObjectOutputStream out)
         throws IOException
     {
+		LOG.info("---------------------->>> SERIALIZE START");
         int entries = data._attributes.size();
         out.writeObject(entries);
+
+        //dumpAtributes(data, out);
+
         for (Entry<String, Object> entry : data._attributes.entrySet())
         {
             out.writeUTF(entry.getKey());
@@ -109,10 +115,27 @@ public class SessionData implements Serializable
             if (LOG.isDebugEnabled())
                 LOG.debug("Attribute {} class={} isServerLoader={}", entry.getKey(), clazz.getName(), (!isContextLoader));
             out.writeBoolean(!isContextLoader);
-            out.writeObject(entry.getValue());
+
+            // Temporary code for trace
+            byte[] serializedDump = dumpObject(entry.getValue());
+			LOG.info("Attribute {} with class name {}. Serialized value size is: {}, dump in base64: {}", entry.getKey(), clazz.getName(), serializedDump.length, Base64.getEncoder().encodeToString(serializedDump));
+
+			out.writeObject(entry.getValue());
         }
+		LOG.info("----------------------<<< SERIALIZE END");
     }
 
+    private static byte[] dumpObject(Object value) throws IOException {
+    	byte[] result = null;
+    	ByteArrayOutputStream bos = new ByteArrayOutputStream();
+    	try (java.io.ObjectOutputStream out = new GluuObjectOutputStream(bos)) {
+    		out.writeObject(value);
+			out.flush();
+			result = bos.toByteArray();
+		}
+		return result;
+	}
+
     /**
      * De-serialize the attribute map of a session.
      *
@@ -126,6 +149,7 @@ public class SessionData implements Serializable
     public static void deserializeAttributes(SessionData data, java.io.ObjectInputStream in)
         throws IOException, ClassNotFoundException
     {
+		LOG.info("---------------------->>> DESERIALIZE START");
         Object o = in.readObject();
         if (o instanceof Integer)
         {
@@ -141,10 +165,15 @@ public class SessionData implements Serializable
             {
                 String name = in.readUTF(); //attribute name
                 boolean isServerClassLoader = in.readBoolean(); //use server or webapp classloader to load
-                if (LOG.isDebugEnabled())
-                    LOG.debug("Deserialize {} isServerLoader={} serverLoader={} tccl={}", name, isServerClassLoader, serverLoader, contextLoader);
-                Object value = ((ClassLoadingObjectInputStream)in).readObject(isServerClassLoader ? serverLoader : contextLoader);
-                data._attributes.put(name, value);
+                if (true)
+                    LOG.info("Deserialize {} isServerLoader={} serverLoader={} tccl={}", name, isServerClassLoader, serverLoader, contextLoader);
+                try {
+	                Object value = ((ClassLoadingObjectInputStream)in).readObject(isServerClassLoader ? serverLoader : contextLoader);
+	                data._attributes.put(name, value);
+	                LOG.info("Deserialize {} isServerLoader={} serverLoader={} tccl={}", name, isServerClassLoader, serverLoader, contextLoader);
+                } catch (java.io.OptionalDataException ex) {
+	                LOG.info("Faield to deserialize {}", name);
+				}
             }
         }
         else
@@ -155,6 +184,7 @@ public class SessionData implements Serializable
             data._attributes = new ConcurrentHashMap<>();
             data.putAllAttributes((Map<String, Object>)o);
         }
+		LOG.info("----------------------<<< DESERIALIZE END");
     }
 
     public SessionData(String id, String cpath, String vhost, long created, long accessed, long lastAccessed, long maxInactiveMs)
